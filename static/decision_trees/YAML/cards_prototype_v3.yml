################################################################################
######                  IMPORTANT RULES FOR MAKING CARDS                  ######
###                                                                          ###
#  1. First card must have ID "start"                                          #
#  2. Last card must have ID "end"                                             #
#  3. `function` is the JavaScript function that will be used on the data.     #
#     Note that this must be spelled exactly as the function is defined.       #
#  4. `additional_arguments` lists (in order) arguments besides the data       #
#     itself to the function in #3.                                            #
#  5. `ask_user` indicates whether Sherlock should wait for user input or not. #
#  6. `description` after the result is calculated can only use replacements   #
#     that will be in the JS function's return value.                          #
#  7. Buttons that only define `next_card` will automatically advance.         #
#  8. Buttons that define `button_location`, but not `button_text` will have   #
#     the last text they were set with. However, it's best to be explicit and  #
#     define your own.                                                         #
#  9. If you take advantage of the `follow_up` section, note that this will    #
#     only show the data, not act as a new card. Use this to graph the values  #
#     after Sherlock makes a decision so the user can see what Sherlock saw    #
#     and accept it. Note that if you need a user response on the same data    #
#     afterwards, you will need to define a separate card.                     #
# 10. Title and description in the outer section of the card will show when    #
#     the data loads. The description will change when the data has been       #
#     retrieved if it is provided again in the result section.                 #
# 11. To properly switch cards, the ID's for `next_card` and that card being   #
#     referenced must match exactly.                                           #
# 12. The `query_url` must match the API endpoint for that query resource and  #
#     must have a query string appended with all the values that need to be    #
#     replaced.                                                                #
# 13. Cards that are meant to display text only and require buttons should     #
#     define `ask_user` to true, since the user needs to answer to move        #
#     forward to the next card.                                                #
#                                                                              #
################################################################################

cards:

# Get dataframe from new_campaign.sql
# Rule: - If total number of campaigns for this client did not change --> pass to next card
#       - If the total number of campaigns for this client did not change --> let the user Acknowledge that they launched/removed a campaign recently and that this might affect performance. Then pass to next card.
    - id: 'start' # call the first card "start" to easily find it later regardless of the order this file is in
      title: 'Checking Number of Campaigns...'
      query_url: /api/v1/query/sherlock/setup/new_campaign?client_id={client_id}&start_date={start_date}&end_date={end_date}
      description:
      action:
        ask_user: false
        function: detectChangeInCount
        additional_arguments:
          columnToCount: campaign_name
        result:
          true:
              description: "Seems that someone launched/paused (a) campaign(s): {values} on this account on {day}. This can affect your campaign's CR."
              next_card: 'cr_setup_sampling_ratio_rule'
              button_location: center
              button_text: "OK, Keep investigating"
          false:
              next_card: 'cr_setup_sampling_ratio_rule'

################################################################################################################################################################################
################################################################################################################################################################################
################################################################################################################################################################################

# Get dataframe from setup_sampling_ratio.sql
# Rule: - If the sampling ratio did not change -> pass to next card
#       - If the sampling ratio changed --> show graph to end user with the evolution to confirm it is normal and let user know this might affect performance. Then pass to next card.
    - id: 'cr_setup_sampling_ratio_rule'
      title: 'Sampling Ratio'
      query_url: /api/v1/query/sherlock/setup/sampling_ratio?client_id={client_id}&campaign_id={campaign_id}&start_date={start_date}&end_date={end_date}
      description:
      action:
        ask_user: false
        function: detectChangeInValue
        additional_arguments:
          - columns: "campaign_sampling_ratio"
        result:
          true:
              description: "It seems that someone changed the sampling ratio on {day}. This can significantly impact campaign performance. Please discuss it with your TAM, AX to revert, or let your client know about this."
              follow_up:
                function: graphData
                additional_arguments: # the first argument (the data from the query) will automatically be used
                    columnToGraph: "campaign_sampling_ratio" # the column to graph
                    yAxisFormat: "percent" # how to format the y-axis (percent, currency, number etc.)
                    graphType: "line" # graph type (line or bar)
                    isDatetime: false # dates only not datetimes
                    graphAsIndex: false # Indexed graph (day 1 = 100)
              next_card: 'cr_setup_capping_rule'
              button_location: center
              button_text: "OK, Keep investigating"
          false:
              next_card: 'cr_setup_capping_rule'


################################################################################################################################################################################
################################################################################################################################################################################
################################################################################################################################################################################


### Possibility to add a cart to check straight away if there were changes in the capping setup. If not, proceded to next card and otherwise deed dive into campaign capping


# Get dataframe from setup_capping.sql
# Rule: - If none of the campaign_capping_starting_date changed --> pass to next card
#       - If some campaign_capping_starting_date changed --> Let the user Acknowledge that the capping starting date changed and that it might afftect performance. Then pass to next card.
    - id: 'cr_setup_capping_rule'
      title: 'Capping Parameters'
      query_url: /api/v1/query/sherlock/setup/capping?client_id={client_id}&campaign_id={campaign_id}&start_date={start_date}&end_date={end_date}
      description:
      action:
        ask_user: false
        function: detectChangeInValue
        additional_arguments:
          columns:
            - campaign_capping_starting_day
            - campaign_capping_ending_day
            - daily_capping
            - campaign_capping_since_last_visit
            - partner_capping_since_last_visit
            - campaign_lifetime_capping
        result:
          true:
              description: "It seems that someone changed {changes}. This can significantly impact campaign performance. Please discuss it with your TAM, AX to revert, or let your client know about this."
              next_card: 'cr_setup_segmentation_enabled_rule'
              button_location: center
              button_text: "OK, Keep investigating"
          false:
              next_card: 'cr_setup_segmentation_enabled_rule'

################################################################################################################################################################################
################################################################################################################################################################################
################################################################################################################################################################################

# Get dataframe from setup_is_segmentation_enabled.sql
# Rule: - If max(is_segmentation_enabled) = 1
#       - If  max(is_segmentation_enabled) = 0 --> Let the user Acknowledge that the segmentation was enabled and that it might afftect performance. Then pass to next card.
    - id: 'cr_setup_segmentation_enabled_rule'
      title: 'Segmentation Parameters'
      query_url: /api/v1/query/sherlock/setup/segmentation_is_enabled?campaign_id={campaign_id}&start_date={start_date}&end_date={end_date}
      description:
      action:
        ask_user: false
        function: checkMaxValue
        additional_arguments:
          column: is_segmentation_enabled # column to check the max for
          value: 0 # check if the max value is equal to 0
        result:
          true:
              description: "Seems that segmentation is activated on this account. Let's check if changes in the segmentation have been made recently."
              next_card: 'cr_setup_segment_names_rule'
              button_location: center
              button_text: "OK, Keep investigating"
          false:
              next_card: 'cr_setup_banners'


# Get dataframe from setup_segment_names.sql
# Rule: - If count(disctinct segment_name) is stable day over day, pass to next card
#       - If  count(disctinct segment_name) is not stable day over day --> Let the user Acknowledge that the the number of segments is fluctuating and that it might afftect performance. Then pass to next card.
    - id: 'cr_setup_segment_names_rule'
      title: 'Segmentation Parameters'
      query_url: /api/v1/query/sherlock/setup/segment_names?campaign_id={campaign_id}&start_date={start_date}&end_date={end_date}
      description:
      action:
        ask_user: false
        function: detectChangeInCount
        additional_arguments:
          columnToCount: segment_name
        result:
          true:
              description: "It seems that someone added/deleted a segment: {values} on {day}. This can significantly impact campaign performance. Please discuss it with your TAM, AX to revert, or let your client know about this."
              next_card: 'cr_setup_banners'
              button_location: center
              button_text: "OK, Keep investigating"
          false:
              next_card: 'cr_setup_banners'


################################################################################################################################################################################
################################################################################################################################################################################
################################################################################################################################################################################

# Get dataframe from setup_banners.sql
# Rule: - If count(distinct banner_name) is stable day over day --> Pass to next check
#       - If  count(distinct banner_name) is not stable day over day --> Let the user Acknowledge that the banners that were enabled / disabled and that it might affect performance. Then pass to next card.
    - id: 'cr_setup_banners'
      title: 'Number of Banners Live'
      query_url: /api/v1/query/sherlock/setup/banners?client_id={client_id}&campaign_id={campaign_id}&start_date={start_date}&end_date={end_date}
      description:
      action:
        ask_user: false
        function: detectChangeInValue
        additional_arguments:
          columns: banner_count
        result:
          true:
              description: "It looks that someone changed {changes}. This can significantly impact campaign performance. Please discuss it with your TAM, AX to revert, or let your client know about this."
              follow_up:
                function: graphData
                additional_arguments: # the first argument (the data from the query) will automatically be used
                    columnToGraph: "banner_count" # the column to graph
                    yAxisFormat: "number" # how to format the y-axis (percent, currency, number, decimal etc.)
                    graphType: "line" # graph type (line or bar)
                    isDatetime: false # dates only not datetimes
                    graphAsIndex: false # Indexed graph (day1 =100)
              next_card: 'cr_setup_feed_quality_graph'
              button_location: 'center'
              button_text: "OK, Keep investigating"
          false:
              next_card: 'cr_setup_feed_quality_graph'


################################################################################################################################################################################
################################################################################################################################################################################
################################################################################################################################################################################

# Get dataframe from setup_feed_QS.sql
# Rule: - If change of QS day over day is less than 25% -> Pass to next card
#       - If change of QS day over day is less than 25% -> Let the user Acknowledge that the last feed import was more than 10 days ago and it might afftect performance. Then pass to next card.
# - id: 'cr_setup_feed_quality_rule'
#       title: 'Feed Check'
#       query_url: /api/v1/query/sherlock/setup/quality_score?partner_id={partner_id}&start_date={start_date}&end_date={end_date}
#       description:
#       action:
#         ask_user: false
#         function: isPercentChangeStable
#         additional_arguments:
#           column: feed_quality # Column name for the check
#           threshold: 0.25 # threshold (make this 0 to test)
#         result:
#           true:
#               description: "It seems that there have been a significant change in your feed quality score. This can significantly impact campaign performance. Please discuss it with your TAM, AX to revert, or let your client know about this."
#               follow_up:
#                 function: graphData
#                 additional_arguments:
#                       columnToGraph: feed_quality # the column to graph
#                       yAxisFormat: percent # how to format the y-axis (percent, currency, number, decimal etc.)
#                       graphType: line # graph type (line or bar)
#                       isDatetime: false # dates only not datetimes
#                       graphAsIndex: false # Indexed graph (day1 =100)
#               next_card: 'cr_feed_quality_text'
#               button_location: center
#               button_text: "OK, Keep investigating"
#           false:
#               next_card: 'cr_perf_deduplication_ratio_rule'

# Display FeedQuality per day
    - id: 'cr_setup_feed_quality_graph'
      title: 'Feed Check'
      query_url: /api/v1/query/sherlock/setup/quality_score?partner_id={partner_id}&start_date={start_date}&end_date={end_date}
      description: 'Has the feed quality stable over time?'
      action:
        ask_user: true
        function: graphData
        additional_arguments:
              columnToGraph: feed_quality # the column to graph
              yAxisFormat: percent # how to format the y-axis (percent, currency, number, decimal etc.)
              graphType: line # graph type (line or bar)
              isDatetime: false # dates only not datetimes
              graphAsIndex: false # Indexed graph (day1 =100)
        result:
          true:
              next_card: 'cr_perf_deduplication_ratio_rule'
              button_location: right
              button_text: Yes
          false:
              next_card: 'cr_feed_quality_text'
              button_location: left
              button_text: No

# Text output if feed quality changes
    - id: 'cr_feed_quality_text'
      title: 'Feed Check'
      query_url:
      description: 'It seems that there have been a significant change in your feed quality score. This can significantly impact campaign performance. Please discuss it with your TAM, AX to revert, or let your client know about this.'
      action:
        ask_user: true
        result:
          true:
              next_card: 'cr_setup_feed_import_rule'
              button_location: center
              button_text: "Keep investigating"

# Get dataframe from setup_feed_QS.sql
# Rule: - If max(FeedImport) >= current_date - 10. Pass to next card
#       - If  max(FeedImport) < current_date - 10 --> Let the user Acknowledge that the last feed import was more than 10 days ago and it might afftect performance. Then pass to next card.
    - id: 'cr_setup_feed_import_rule'
      title: 'Feed Check'
      query_url: /api/v1/query/sherlock/setup/feed_import?partner_id={partner_id}&start_date={start_date}&end_date={end_date}
      description:
      action:
        ask_user: false
        function: isRecent
        additional_arguments:
          threshold: 10 # threshold (make this 0 to test)
        result:
          true:
              next_card: 'cr_perf_deduplication_ratio_rule'
          false:
              description: "It also seems that your last feed import is more than 10 days ago. Your feed might be the issue here. Please discuss it with your TAM, AX to revert, or let your client know about this."
              next_card: 'cr_perf_deduplication_ratio_rule'
              button_location: center
              button_text: "OK, Keep investigating"

################################################################################################################################################################################
################################################################################################################################################################################
################################################################################################################################################################################

# Get dataframe from perf_dedup.sql
# Rule:
# - If dedup_ratio varies by less than 30% day over day everyday --> pass to next card
# - If  dedup_ratio varies by more than 30% day over day at least one day --> Let the user Acknowledge that the dedup ratio is volatile and that it might afftect performance. Then pass to next card.
    - id: 'cr_perf_deduplication_ratio_rule'
      title: 'Attribution Model'
      query_url: /api/v1/query/sherlock/performance/dedup?campaign_id={campaign_id}&start_date={start_date}&end_date={end_date}
      description:
      action:
        ask_user: false
        function: isPercentChangeStable
        additional_arguments:
          column: dedup_ratio # Column name for the check
          threshold: 0.25 # threshold (make this 0 to test)
        result:
          true:
              next_card: 'cr_perf_website_sales_share_graph'
          false:
              next_card: 'cr_perf_deduplication_ratio_graph'

# Display deduplication ratio per day
    - id: 'cr_perf_deduplication_ratio_graph'
      title: 'Attribution Model'
      query_url: /api/v1/query/sherlock/performance/dedup?campaign_id={campaign_id}&start_date={start_date}&end_date={end_date}
      description: 'Seems that the dedup ratio is volatile. Do you notice any unusual variation looking at recent data?'
      action:
        ask_user: true
        function: graphData
        additional_arguments:
          columnToGraph: dedup_ratio # the column to graph
          yAxisFormat: percent # how to format the y-axis (percent, currency, number, decimal etc.)
          graphType: line # graph type (line or bar)
          isDatetime: false # dates only not datetimes
          graphAsIndex: false # Indexed graph (day1 =100)
        result:
          true:
              next_card: 'cr_perf_deduplication_ratio_text'
              button_location: right
              button_text: Yes
          false:
              next_card: 'cr_perf_website_sales_share_graph'
              button_location: left
              button_text: No

# Text output if deduplication ratio changes
    - id: 'cr_perf_deduplication_ratio_text'
      title: 'Attribution Model'
      query_url:
      description: 'An unstable Dedup Ratio can alter the prediction engine. Please review this issue with your TAM, AX to revert, or let your client know about this.'
      action:
        ask_user: true
        result:
          true:
              next_card: 'cr_perf_website_sales_share_graph'
              button_location: center
              button_text: "OK, Keep investigating"


################################################################################################################################################################################
################################################################################################################################################################################
################################################################################################################################################################################

# Get dataframe from performance_share_of_website.sql
# Rule :
# - If share of total sales constant --> No issue, it is a seasonality issue
# - If share of total website sales decreases / Increase --> Keep investigating
    - id: 'cr_perf_website_sales_share_graph'
      title: 'Share of Total Website Sales'
      query_url: /api/v1/query/sherlock/performance/share_of_website?campaign_id={campaign_id}&start_date={start_date}&end_date={end_date}
      description: 'Is the share of sales coming from this campaign stable on the client side?'
      action:
        ask_user: false
        function: isPercentChangeStable
        additional_arguments:
          column: percentage_of_website # Column name for the check
          threshold: 0 # threshold (make this 0 to test)
        result:
          true:
              next_card: 'cr_perf_landing_rate_graph'
          false:
              description: "If the share of sales coming from this campaign over your total website sales is stable, this is likely to be a seasonality issue. Performance is down on the client side too and you need to discuss this with your client."
              follow_up:
                function: graphData
                additional_arguments:
                      columnToGraph: percentage_of_website # the column to graph
                      yAxisFormat: percent # how to format the y-axis (percent, currency, number, decimal etc.)
                      graphType: line # graph type (line or bar)
                      isDatetime: false # dates only not datetimes
                      graphAsIndex: false # Indexed graph (day1 =100)
              next_card: 'cr_perf_landing_rate_graph'
              button_location: right
              button_text: "OK, Keep investigating"
              next_card: 'cr_perf_landing_rate_graph'

################################################################################################################################################################################
################################################################################################################################################################################
################################################################################################################################################################################

# Get dataframe from perf_landing_rate_check.sql
# Display landing rate per day
# Rule:
# - If landing rate constant --> Keep investigating
# - If landing rate decreases / Increase --> Escalate to understand why the landing rate is not constant
    - id: 'cr_perf_landing_rate_graph'
      title: 'Landing rate evolution'
      query_url: /api/v1/query/sherlock/performance/landing_rate?partner_id={partner_id}&campaign_id={campaign_id}&start_date={start_date}&end_date={end_date}
      description: 'Is the landing rate stable on this campaign?'
      action:
        ask_user: true
        function: graphData
        additional_arguments:
          columnToGraph: landing_rate # the column to graph
          yAxisFormat: percent # how to format the y-axis (percent, currency, number, decimal etc.)
          graphType: line # graph type (line or bar)
          isDatetime: false # dates only not datetimes
          graphAsIndex: false # Indexed graph (day1 =100)
        result:
          true:
              next_card: 'cr_perf_device_graph'
              button_location: right
              button_text: Yes
          false:
              next_card: 'cr_perf_landing_rate_text'
              button_location: left
              button_text: No

# Text output if landing rate changes
    - id: 'cr_perf_landing_rate_text'
      title: 'Landing rate evolution'
      query_url:
      description: 'A volatile Landing Rate often impacts campaign performance. It is generally linked to an issue with In App or Cross device. Please investigate further on this link: https://tableau.yourcompany.com/#/<channel_id> and confirm the issue with your TAM or AX.'
      action:
        ask_user: true
        result:
          true:
            next_card: 'cr_perf_device_graph'
            button_location: 'right'
            button_text: "OK, Keep investigating (click here after opening the link above)"


################################################################################################################################################################################
################################################################################################################################################################################
################################################################################################################################################################################

# Get dataframe from CR_per_device.sql
# Display CR evolution per day per device
# No Rule
    - id: 'cr_perf_device_graph'
      title: 'CR evolution per device'
      query_url: /api/v1/query/sherlock/performance/CR_per_device?campaign_id={campaign_id}&start_date={start_date}&end_date={end_date}
      description: 'Is the CR evolution similar accross devices?'
      action:
        ask_user: true
        function: graphData
        additional_arguments:
          columnToGraph: # the column to graph
            - "Desktop"
            - "Mobile"
            - "Unknown"
          yAxisFormat: percent # how to format the y-axis (percent, currency, number, decimal etc.)
          graphType: line # graph type (line or bar)
          isDatetime: false # dates only not datetimes
          graphAsIndex: false # Indexed graph (day1 =100)
        result:
          true:
              next_card: 'cr_perf_CPC_evolution_graph'
              button_location: right
              button_text: Yes
          false:
              next_card: 'cr_perf_device_text'
              button_location: left
              button_text: No

# If CR change located on one single device
    - id: 'cr_perf_device_text'
      title: 'CR evolution per device'
      query_url:
      description: 'A dip in performance on a single device narrows down the issue. Please keep investigating but let you TAM / AX know about this when you escalate the issue.'
      action:
        ask_user: true
        result:
          true:
            next_card: 'cr_perf_CPC_evolution_graph'
            button_location: 'right'
            button_text: "OK, Keep investigating"


################################################################################################################################################################################
################################################################################################################################################################################
################################################################################################################################################################################

# Get dataframe from CPC_evolution.sql
# Rule:
# - If CPC stable --> Keep investigating
# - If CPC decreases / Increase --> Escalate to understand why the landing rate is not constant
    - id: 'cr_perf_CPC_evolution_graph'
      title: 'CPC evolution'
      query_url: /api/v1/query/sherlock/performance/CPC_evolution?campaign_id={campaign_id}&start_date={start_date}&end_date={end_date}
      description: 'Are CPCs stable over time on this campaign? Please, remind that these are CPC indexed on your 1st day of investigation'
      action:
        ask_user: true
        function: graphData
        additional_arguments:
          columnToGraph: 'CPC' # the column to graph
          yAxisFormat: decimal # how to format the y-axis (percent, currency, number, decimal etc.)
          graphType: 'line' # graph type (line or bar)
          isDatetime: false # dates only not datetimes
          graphAsIndex: true # Indexed graph (day1 =100)
        result:
          true:
              next_card: 'cr_perf_bid_evolution_graph'
              button_location: 'right'
              button_text: 'Yes'
          false:
              next_card: 'cr_perf_CPC_evolution_text'
              button_location: 'left'
              button_text: 'No'

# Text output if CPC change
    - id: 'cr_perf_CPC_evolution_text'
      title: 'CPC evolution'
      query_url:
      description: "Seems that your CPC are volatile. Let's check your smoothing settings. You can also discuss it with your TAM or AX as changing your CPC too often can significantly affect your campaign performances."
      action:
        ask_user: true
        result:
          true:
            next_card: 'cr_setup_smoothing_rule'
            button_location: 'center'
            button_text: 'OK'

################################################################################################################################################################################
################################################################################################################################################################################
################################################################################################################################################################################

# Get dataframe from smoothing.sql
# Rule:
# If smoothing_ratio changes by less than 10% --> Keep investigating
# If smoothing decreases / Increase --> Escalate to understand why the landing rate is not constant
    - id: 'cr_setup_smoothing_rule'
      title: 'Smoothing evolution'
      query_url: /api/v1/query/sherlock/setup/smoothing?campaign_id={campaign_id}&start_date={start_date}&end_date={end_date}
      description:
      action:
        ask_user: false
        function: isPercentChangeStable
        additional_arguments:
          column: 'smoothing_ratio' # Column name for the check
          threshold: 0.25 # threshold (make this 0 to test)
        result:
          true:
              next_card: 'cr_perf_bid_evolution_graph'
          false:
              description: "It looks that smoothing is active on this campaign. This can significantly impact your campaign performance. Please discuss this with your TAM or AX to update your budget or change your settings."
              follow_up:
                function: graphData
                additional_arguments: # the first argument (the data from the query) will automatically be used
                    columnToGraph: 'smoothing_ratio' # the column to graph
                    yAxisFormat: 'percent' # how to format the y-axis (percent, currency, number, decimal etc.)
                    graphType: 'line' # graph type (line or bar)
                    isDatetime: false # dates only not datetimes
                    graphAsIndex: false # Indexed graph (day1 =100)
              next_card: 'cr_perf_bid_evolution_graph'
              button_location: 'center'
              button_text: "OK, Keep investigating (there might be no other issue)"

################################################################################################################################################################################
################################################################################################################################################################################
################################################################################################################################################################################

# Get dataframe from bid_evolution.sql
# Display bids per daytime
# No Rule
    - id: 'cr_perf_bid_evolution_graph'
      title: 'Bid evolution'
      query_url: /api/v1/query/sherlock/performance/bid_evolution?campaign_id={campaign_id}&start_date={start_date}&end_date={end_date}
      description: 'Are bids stable over time on this campaign?'
      action:
        ask_user: true
        function: graphData
        additional_arguments:
          columnToGraph: 'computed_bid' # the column to graph
          yAxisFormat: decimal # how to format the y-axis (percent, currency, number, decimal etc.)
          graphType: 'line' # graph type (line or bar)
          isDatetime: true # datetimes only (no date)
          graphAsIndex: false # Indexed graph (day1 =100)
        result:
          true:
              next_card: 'end'
              button_location: 'right'
              button_text: 'Yes, finish investigation'
          false:
              next_card: 'cr_perf_bid_evolution_text'
              button_location: 'left'
              button_text: No

# Text output if bids change
    - id: 'cr_perf_bid_evolution_text'
      title: 'Bid evolution'
      query_url:
      description: "Seems that your bids are very volatile. Let's investigate further if this is due to vCPC, the feedbackloop factor or a prediction issue."
      action:
        ask_user: true
        result:
          true:
            next_card: 'cr_setup_VCPC_rule'
            button_location: 'center'
            button_text: 'OK'



################################################################################################################################################################################
################################################################################################################################################################################
################################################################################################################################################################################

# Get dataframe from VCPC.sql
# Rule:
# If vCPC changed by more than 10% day over day -> Display the vCPC evolution
# If vCPC changed by more than 10% day over day -> Keep investigating (fbl_evolution)
    - id: 'cr_setup_VCPC_rule'
      title: 'vCPC evolution'
      query_url: /api/v1/query/sherlock/setup/VCPC?campaign_id={campaign_id}&start_date={start_date}&end_date={end_date}
      description:
      action:
        ask_user: false
        function: isPercentChangeStable
        additional_arguments:
          column: 'vCPC' # Column name for the check
          threshold: 0.10 # threshold (make this 0 to test)
        result:
          true:
              next_card: 'cr_perf_fbl_factor_graph'
          false:
              description: "It looks that someone changed {changes}. This can significantly impact campaign performance as it alters your bids. Please discuss it with your TAM, AX to revert, or let your client know about this."
              follow_up:
                function: graphData
                additional_arguments: # the first argument (the data from the query) will automatically be used
                    columnToGraph: 'vCPC' # the column to graph
                    yAxisFormat: 'percent' # how to format the y-axis (percent, currency, number, decimal etc.)
                    graphType: 'line' # graph type (line or bar)
                    isDatetime: true # datetimes only (no date)
                    graphAsIndex: false # Indexed graph (day1 =100)
              next_card: 'cr_perf_fbl_factor_graph'
              button_location: 'center'
              button_text: "OK, Keep investigating (there might be no other issue)"

################################################################################################################################################################################
################################################################################################################################################################################
################################################################################################################################################################################

# Get dataframe from fbl_evolution.sql
# Display feedbackloop factor per day
# No Rule
    - id: 'cr_perf_fbl_factor_graph'
      title: 'Feedbackloop Evolution'
      query_url: /api/v1/query/sherlock/performance/feedbackloop_factor?campaign_id={campaign_id}&start_date={start_date}&end_date={end_date}
      description: 'Is the Feedbackloop Factor stable on this campaign?'
      action:
        ask_user: true
        function: graphData
        additional_arguments:
          columnToGraph: 'fbl_factor' # the column to graph
          yAxisFormat: decimal # how to format the y-axis (percent, currency, number, decimal etc.)
          graphType: 'line' # graph type (line or bar)
          isDatetime: true # datetimes only (no date)
          graphAsIndex: false # Indexed graph (day1 =100)
        result:
          true:
              next_card: 'cr_perf_prediction_factor_graph'
              button_location: 'right'
              button_text: Yes
          false:
              next_card: 'cr_perf_fbl_factor_text'
              button_location: 'left'
              button_text: No

# Text output if fbl factor changes
    - id: 'cr_perf_fbl_factor_text'
      title: 'Feedbackloop Evolution'
      query_url:
      description: "Seems that your feedbackloop is going wild. Let's check how prediction has been evolving too before escalating"
      action:
        ask_user: true
        result:
          true:
            next_card: 'cr_perf_prediction_factor_graph'
            button_location: 'center'
            button_text: 'OK'

################################################################################################################################################################################
################################################################################################################################################################################
################################################################################################################################################################################

# Get dataframe from prediction_factor.sql
# Display prediction factor per day
# No Rule
    - id: 'cr_perf_prediction_factor_graph'
      title: 'Prediction factor evolution'
      query_url: /api/v1/query/sherlock/performance/prediction_factor?campaign_id={campaign_id}&start_date={start_date}&end_date={end_date}
      description: 'Is the prediction factor stable on this campaign?'
      action:
        ask_user: true
        function: graphData
        additional_arguments:
          columnToGraph: 'prediction_factor' # the column to graph
          yAxisFormat: decimal # how to format the y-axis (percent, currency, number, decimal etc.)
          graphType: 'line' # graph type (line or bar)
          isDatetime: true # datetimes only (no date)
          graphAsIndex: false # Indexed graph (day1 =100)
        result:
          true:
              next_card: 'end'
              button_location: 'right'
              button_text: 'Yes, finish investigation'
          false:
              next_card: 'cr_perf_prediction_factor_text'
              button_location: 'left'
              button_text: No

# Text output if prediction factor changes
    - id: 'cr_perf_prediction_factor_text'
      title: 'Prediction factor evolution'
      query_url:
      description: "Seems that your prediction factor is going wild. Please, check with your AX to understand what might have caused this and resolve the issue."
      action:
        ask_user: true
        result:
          true:
            next_card: 'end'
            button_location: 'right'
            button_text: 'Ok, finish investigation'

################################################################################################################################################################################
################################################################################################################################################################################
################################################################################################################################################################################


# Last card (always)
    - id: 'end'
      title: 'Finished!'
      description: "We hope you enjoyed using Sherlock for the investigation; feel free to discuss it with your TAM or AX if needed."
